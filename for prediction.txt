import os
import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image
from skimage.transform import resize

# Define class names
class_names = ['benign', 'malignant', 'normal']

# Load 'BreastCancerSegmentor.h5' model
segmentor_model = load_model('BreastCancerSegmentor.h5')

# Load 'valid_classifier.h5' model
classification_model = load_model('valid_classifier.h5')

# Define a function to preprocess the image
def prepare_image(image_path, target_size=(256, 256)):
    img = image.load_img(image_path, target_size=target_size)
    img = image.img_to_array(img)
    img = img / 255.0  # Normalize pixel values
    return img

def prepare_image2(mask_pred, target_size=(256, 256)):
    img2 = image.load_img(mask_pred, color_mode='grayscale', target_size=target_size)
    img2 = image.img_to_array(img2)
    img2 = img2 / 255.0  # Normalize pixel values
    img2 = np.expand_dims(img2, axis=-1)  # Add a channel dimension
    return img2

# Define the combined function for classification and segmentation
def classify_and_segment(image_path):
    img = prepare_image(image_path)
    
    # Predict classification
    class_pred = classification_model.predict(np.expand_dims(img, axis=0))[0]
    predicted_class = class_names[np.argmax(class_pred)]
    
    # Predict and visualize masks
    mask_pred = segmentor_model.predict(np.expand_dims(img, axis=0))[0][:, :, 0]
    
    plt.figure(figsize=(12, 6))
    plt.subplot(1, 2, 1)
    plt.imshow(img)
    plt.title('Original Image')
    
    plt.subplot(1, 2, 2)
    plt.imshow(mask_pred, cmap='gray')
    plt.title('Predicted Mask')
    
    plt.show()

    return predicted_class

# Specify the image path you want to classify and segment
image_to_classify = 'path/to/your/image.jpg'

# Call the function to classify and segment the image
predicted_class = classify_and_segment(image_to_classify)

print(f"Predicted Class: {predicted_class}")
